 /**
 ******************************************************************************
 * @file    reloc_network.lkr
 * @author  MCD/AIS Team
 * @brief   Relocatable network support
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019,2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software is licensed under terms that can be found in the LICENSE file in
 * the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

/*
   Description:
   
   	This linker file is used to generate a relocatable elf. The addresses are fake.
   	Only two main memory regions are requested:
   		flash  to store txt/rodata/data/got/weights sections
   		ram    to store initial data/got sections
   		
   	Header (+network_rt_init section) is used by the AI reloc run-time to install
   	the post-processed elf file. Thanks to the ".rel" section (created by the
   	post-process script), the "ram" (data section with absolute @) and "got" section
   	are patched.
   	
   	Note: ".weights" section (i.e. natwork_data.c file is not and should be not included
   	      in the generated elf file. It will be included during the generation of the 
   	      final binay file by the post-process script.
   	
   History:
    1.0: initial version

*/

MEMORY
{
    flash   : ORIGIN = 0x20000000,  LENGTH = 4M /* we write this to flash */
    ram     : ORIGIN = 0x80000000,  LENGTH = 128K /* we allocate this in ram */
    trash   : ORIGIN = 0xF0000000,  LENGTH = 256K /* we throw this away soon after linking */
}

SECTIONS
{
    .flash : {
        /***** start of struct ai_reloc_bin_hdr [see ai_reloc_network.c] *****/
        
        /* binary format marker: 'NBIN' (LE) */
        LONG(0x4E49424E)

        /* version - flags */
        KEEP(*(.network_rt_flags)); 

        /* things to install/load the network */
        LONG(__data_start)
        LONG(__data_end)
        LONG(LOADADDR(.data))

        LONG(__bss_start)
        LONG(__bss_end)

        /* things to run it */
        LONG(__got_start)
        LONG(__got_end)
        LONG(__rel_start)
        LONG(__rel_end)
        LONG(__weights_start_2)
        LONG(__weights_end_2)

        KEEP(*(.network_rt_init));
        
        /***** end of struct ai_reloc_bin_hdr [see ai_reloc_network.c] *****/

        /* code */
        __text_start = ABSOLUTE(.);
        *(.text) *(.text.*) ;
        __text_end = ABSOLUTE(.);
        /* *(.rodata) *(.rodata.*) ; */
        *(EXCLUDE_FILE(*_data.o) .rodata EXCLUDE_FILE(*_data.o) .rodata*);
    } > flash = 0xff

     /*
    .weights : {
        . = ALIGN(4);
        __weights_start = ABSOLUTE(.);
        KEEP(*(*.s_network_weights.*));
        __weights_end = ABSOLUTE(.);
    } > flash = 0xff
    */

    __weights_start_2 = DEFINED(__weights_start) ? __weights_start : 0;
    __weights_end_2 = DEFINED(__weights_end) ? __weights_end : __weights_start_2;

    .data : {
        . = ALIGN(4);
        __data_start = ABSOLUTE(.);
        __dso_handle = ABSOLUTE(__data_start);
        *(.data);
        *(.data.*);
        KEEP(*(.network_rt_ctx));
                
        . = ALIGN(4);
        __data_end = ABSOLUTE(.);

        . = ALIGN(4);
        __init_array_start = ABSOLUTE(.);
        KEEP(*(SORT(.init_array.*)))
        KEEP(*(.init_array))
        __init_array_end = ABSOLUTE(.);

        . = ALIGN(4);
        __fini_array_start = ABSOLUTE(.);
        KEEP(*(SORT(.fini_array.*)))
        KEEP(*(.fini_array))
        __fini_array_end = ABSOLUTE(.);
        LONG(0) /* size in 32-bit words, to add to bss section for dynamic destructor registration */

        . = ALIGN(4);
        __got_start = ABSOLUTE(.);
        *(.got) *(.got.*) ;
        __got_end = ABSOLUTE(.);

    } > ram AT > flash

    .relocs : {
        . = ALIGN(4);
        /* relocs */
        __rel_start = ABSOLUTE(.);
        *(.rel) *(.rel.*) *(.rel.data.rel.local)
        __rel_end = ABSOLUTE(.);
        . = ALIGN(4);

    } > flash = 0xff

    .dynsym : {
        *(.dynsym); *(.dynsym.*);
    } > flash = 0xff

    .bss : {
        . = ALIGN(4);
        __bss_start = ABSOLUTE(.);
        *(.bss) *(.bss.*) *(COMMON);
        . = ALIGN(4);
        __bss_end = ABSOLUTE(.);
    } > ram

    __data_data = LOADADDR(.data);

    .dynstr : {
        *(.dynstr); *(.dynstr.*);
    } > trash
    .hash : {
        *(.hash); *(.hash.*);
    } > trash
    .dynamic : {
        *(.dynamic); *(.dynamic.*);
    } > trash
}

